<?xml version="1.0" encoding="utf-8"?>
<!-- 
This UPPAAL model is part of the research paper:
"Ensuring reliability in electronic examinations through UPPAAL-based trustworthy design" by Wenbo Zhou, Yujiao Zhao, Ye Zhang, Liwen Mu, Yiyuan Wang and Minghao Yin
Currently under submission to PeerJ Computer Science
For more information, visit https://github.com/TURTING-BO/An-Electronic-Examination-Model-Based-on-UPPAAL

Licensed under the MIT License (Non-Commercial Academic Use Only)
Copyright (c) 2024 Wenbo Zhou
See LICENSE file in the project root for full license information.
-->
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

//Constant Declarations
const int N = 2; //the number of total identifiers
const int Q = 3; //the number of total questions
const int M = 2; //the number of total scores
const int MaxSize = 50; //the max size of a queue
const int MaxT = 1000; //the candidates' examination time
const int ExpT = 10000; //the expiration period of the entire examination process (including setting correct answers, registration, and marking, etc.)
const int D = 2; //the minimum allowed distance between candidates' answers (used to check Similarity Matrix)
const int U = 10; //the upper limit value of answers


//Typedef Declarations
typedef int[0, N-1]  ID; //identifiers with the range of [0, N]
typedef int[-1, N-1] NCID; //identifiers with the range of [-1,N-1], where -1 is used as an initial and unassigned value
typedef int[0, Q-1]  QS; //questions type with the range of [0, Q-1]
typedef int[-1, Q-1] NCQS; //questions type with the range of [-1, Q-1]
typedef int[-1, M-1] MS; //scores type with the range of [-1, M-1]
typedef int[-1, 10]  OpType; //operation type with the range of [-1,10] where: -1: none, 0: start, 1: register, 2: login, 3: get, 4: submit, 5: accept, 6: corrAns, 7: mark, 8: notify, 9: reset, 10: end
typedef int[-1, U] ANS; //answers type with the range of [0, U]
typedef int CAS; //correct answers type
typedef int array[N][Q];

//Channel Declarations
chan register[ID], login[ID], get[ID], submit[ID], accept[ID], corrAns, mark, notify[ID], end;
broadcast chan reset;

//Clock Declarations
clock t, pt;

//Variable Declaration
int imn = 0;      //identifier that has marked but wait for notifying in Examiner
int p_cnt = 0;    //prepared candidate number
int q_cnt[ID];    //question counter to keep the order
CAS ca[Q];         //the question with id belongs to [0, Q-1] having a correct answer
bool cend[ID];    //candidate end flags
bool cexpire[ID];  //candidate expire flags

//Operation Type
typedef struct{
    NCID id;      //candidate id
    OpType op;    //operation type: -1: none, 0: start, 1: register, 2: login, 3: get, 4: submit, 5: accept, 6: corrAns, 7: mark, 8: notify, 9: end, 10: reset
    NCQS q;       //question id
    ANS a;       //answer id
}Operation;

//Item Type
typedef struct{
    NCQS q;       //question id
    ANS a;       //answer id
    MS s;        //score
}ItemType;

//Candidate Type
typedef struct{
    ItemType item[Q]; //items
    int total;    //total score: sum(s[Q])
}CandidateType;

CandidateType cand[N];

//Similarity Matrix
int sm[N][N];

//******************* OpQueue (op,i,q,a) **************************
// 1.OpQueue
// 2.InitOpQueue
// 3.EnOpQueue
// 4.FindElement
// 5.FindOperation
// 6.DelOp
//*****************************************************************

//OpQueue Type
typedef struct{
    Operation data[MaxSize]; //store the elements of a queue
    int front; //queue head
    int rear;  //queue tail
}OpQueue;

//T: Total, R: Register, S: Submit, A: Accept
OpQueue T, R, S, A;

//Initialize an OpQueue
void InitOpQueue(OpQueue&amp; q)
{
    int i;
    for(i = 0; i &lt; MaxSize; i++)
    {
        q.data[i].id = -1;
        q.data[i].op = -1;
        q.data[i].q = -1;
        q.data[i].a = 0;
    }
    q.front = q.rear = 0;
}

//Add an element to an OpQueue
bool EnOpQueue(OpQueue&amp; q, int xi, int xop, NCQS xq, int xa)
{
    if ((q.rear+1) % MaxSize == q.front)
        return false;
    q.data[q.rear].id = xi;
    q.data[q.rear].op = xop;
    q.data[q.rear].q = xq;
    q.data[q.rear].a = xa;
    q.rear = (q.rear + 1) % MaxSize;
    return true;
}

//Find an element in an OpQueue according to identifier
bool FindElement(OpQueue q, int xi)
{
    int i = q.front;
    while(i != q.rear &amp;&amp; q.data[i].id != xi)
        i++;
    if (i == q.rear)
        return false;
    else
        return true;
}

//Find an element in an OpQueue according to all operation fields
bool FindOperation(OpQueue q, int xi, int xop, int xq, int xa)
{
    int i = q.front;
    while(i != q.rear &amp;&amp; (q.data[i].id != xi || q.data[i].op != xop || q.data[i].q != xq || q.data[i].a != xa))
        i++;
    if (i == q.rear)
        return false;
    else
        return true;
}

//********************** Model Functions ************************
// 1.InitQueue
// 2.InitVar
// 3.InitCand
// 4.SetCorrAns
// 5.MarkScore
// 6.ComputeSMatrix
// 7.GetQ
// 8.GetA
// 9.SetQ
// 10.SetA
// 11.AllEnd
//***************************************************************

//initialize OpQueue T, R, S, A
void InitQueue(OpQueue&amp; T, OpQueue&amp; R, OpQueue&amp; S, OpQueue&amp; A){
    InitOpQueue(T);
    InitOpQueue(R);
    InitOpQueue(S);
    InitOpQueue(A);
}

//initialize variables imn, p_cnt, q_cnt[N], cend[ID], sm[N][N], eend
void InitVar(){
    int i, j; 
    pt = 0;
    imn = 0;
    p_cnt = 0;
    for(i = 0; i &lt; Q; i++)
        ca[i] = 0; 
    for(i = 0; i &lt; N; i++)
    {
        q_cnt[i] = 0;
        cend[i] = false; 
        cexpire[i] = false; 
    }
    for(i = 0; i &lt; N; i++)
        for(j = 0; j &lt; N; j++)
            sm[i][j] = -1; 
}

//initialize candidates cand[N]
void InitCand(CandidateType&amp; cand[N])
{
    int i, j; 
    for(i = 0; i &lt; N; i++)
    {
        for(j = 0; j &lt; Q; j++)
        {
            cand[i].item[j].q = -1;
            cand[i].item[j].a = -1;
            cand[i].item[j].s = -1;
        }
        cand[i].total = -1;
    }
}

//set correct answers ca[Q] to questions
void CorrAns(CAS&amp; ca[Q]){
    int i; 
    for(i = 0; i &lt; Q; i++)
        ca[i] = i;
}

//mark socres and the total score for every candidate
void MarkScore(CandidateType&amp; cand[N], CAS&amp; ca[Q]){
    int i, j, k; 
    for(i = 0; i &lt; N; i++)
    {
        cand[i].total = 0;
        for(j = 0; j &lt; Q; j++)
        {
            if(cand[i].item[j].a == ca[j])
                cand[i].item[j].s = 1;
            else
                cand[i].item[j].s = 0;
            cand[i].total = cand[i].total + cand[i].item[j].s;
        }
    }
}

//compute Similarity Matrix
void ComputeSMatrix(CandidateType&amp; cand[N]){
    int i, j, k; 
    for(i = 0; i &lt; N; i++)
        for(j = i + 1; j &lt; N; j++)
            for(k = 0; k &lt; Q; k++)
                if(cand[i].item[k].a == cand[j].item[k].a)
                    sm[i][j]++;
}

//get the current question of candidate i
int GetQ(ID i){
    return cand[i].item[q_cnt[i]].q;
}

//get the current answer of candidate i
int GetA(ID i){
    return cand[i].item[q_cnt[i]].a;
}

//set a current question of candidate i
void SetQ(ID i, QS q){
    cand[i].item[q_cnt[i]].q = q;
}

//set a current answer of candidate i
void SetA(ID i, ANS a){
    cand[i].item[q_cnt[i]].a = a;
}

//judge whether all the candidates are on an end state
bool CandEnd(){
    int i;
    bool candend = true; 
    for(i = 0; i &lt; N; i++)
        candend = candend &amp;&amp; cend[i]; 
    return candend;
}

//******************* Specification Functions ***************************
// 1.Answer Singularity: OneAnswerEachQuestion
// 2.Acceptance Assurance: FirstSubmitFollowAccept
// 3.Questions Ordering: GetAcceptGet
// 4.Exam Availability: StartAcceptEnd
// 5.Answer-Score Integrity: NoStartCorrAns
// 6.Cheater Detection: DistanceExceed
// 7.Marking Correctness: NoCorrAnsMark
// 8.Mark Integrity: NoNotifyMark, AllMarked, MarkIntegrity
//***********************************************************************

//check whether only one answer for every question xq from a candidate xi is accepted in an OpQueue
bool OneAnswerEachQuestion(OpQueue q, int xi)
{
    int xq;
    int i, j;
    for(xq = 1; xq &lt; Q + 1; xq++)
        for(i = q.front; i &lt; q.rear; i++)
            for(j = i + 1; j &lt; q.rear; j++)
                if(q.data[i].id == xi &amp;&amp; q.data[j].id == xi &amp;&amp; q.data[i].q == xq &amp;&amp; q.data[j].q == xq)
                    return false;        
    return true;
}

//check whether the first occurrence of submit is followed by accept from a candidate xi is accepted in an OpQueue if the candidate's examination time has not expired
bool FirstSubmitFollowAccept(OpQueue q, int xi)
{
    int i;
    OpQueue tmp; //tmp records the first "submit" of a candidate and a question
    InitOpQueue(tmp);
    for(i = q.front; i &lt; q.rear + 1; i++) //consider i &lt; q.rear to improve
    {
        if(q.data[i].id == xi &amp;&amp; q.data[i].op == 4 &amp;&amp; !FindOperation(tmp, xi, 4, q.data[i].q, -1) &amp;&amp; i &lt; q.rear &amp;&amp; cexpire[xi] != true) //"!FindOperation" checks whether it is the first "submit" of candidate xi 
        {
            if((q.data[i+1].id != xi || q.data[i+1].op != 5 || q.data[i+1].q != q.data[i].q) &amp;&amp; (q.data[i+1].id != -1 &amp;&amp; q.data[i+1].op != -1 &amp;&amp; q.data[i+1].q != -1)) //except the sequence "{4,2,2,3},{-1,-1,-1,-1}", where {-1,-1,-1,-1} is a default operation
                return false;
            EnOpQueue(tmp, xi, 4, q.data[i].q, -1);
        }     
    }
    return true;
}

//check whether get(xi, q) is followed by accept(xi, q) and accept(xi, q) is followed by get(xi, q + 1) in an OpQueue
bool GetAcceptGet(OpQueue q, int xi)
{
    int i, j, k;
    bool flag1 = 0; 
    bool flag2 = 0;
    for(i = q.front; i &lt; q.rear - 1; i++)
    {
        if(q.data[i].id == xi &amp;&amp; q.data[i].op == 3)
        {
            flag1 = 0; //ensure that it is the first accept(xi, q) after get(xi, q).         
            for(j = i + 1; j &lt; q.rear; j++)
            {
                if(q.data[j].id == xi &amp;&amp; q.data[j].op == 5 &amp;&amp; flag1 == 0)
                {
                    if(q.data[j].q != q.data[i].q)
                        return false;
                    flag1 = 1; //find the first accept(xi, q) after get(xi, q), set flag1 to 1. For the OpQueue {3, 2, 1, 0}, ... , {5, 2, 1, 0}, ... , {5, 2, 2, 0}, the {5, 2, 2, 0} should not be considered.
                    flag2 = 0; //ensure that it is the first get(xi, q+1) after accept(xi, q).
                    for(k = j + 1; k &lt; q.rear + 1; k++)
                    {
                        if(q.data[k].id == xi &amp;&amp; q.data[k].op == 3 &amp;&amp; flag2 == 0)
                        {
                            if(q.data[k].q != q.data[i].q + 1)
                                return false;
                            flag2 = 1; //find the first get(xi, q+1) after accept(xi, q), set flag2 to 1. For the OpQueue {5, 2, 1, 0}, ... , {3, 2, 2, 0}, ... , {3, 2, 3, 0}, the {3, 2, 3, 0} should not be considered.                  
                        }
                    }                 
                }
            }                
        }     
    }
    return true;
}

//check whether every accept is preceded by start and followed by end in an OpQueue
bool StartAcceptEnd(OpQueue q)
{
    int i, j; 
    for(i = q.front; i &lt; q.rear; i++)
    {
        if(q.data[i].op == 5)
            for(j = i + 1; j &lt; q.rear + 1; j++)
                if(q.data[i].op == 0)
                    return false;
        if(q.data[i].op == 10)
            for(j = i + 1; j &lt; q.rear + 1; j++)
                if(q.data[j].op == 5)
                    return false;
    }
    return true; 
}

bool Start(OpQueue q, int xi)
{
    return q.data[xi].op == 0;
}

bool Accept(OpQueue q, int xi)
{
    return q.data[xi].op == 5;
}

bool End(OpQueue q, int xi)
{
    return q.data[xi].op == 10;
}

//check whether no corrAns is followed by start in an OpQueue
bool NoStartCorrAns(OpQueue q)
{
    int i, j; 
    for(i = q.front; i &lt; q.rear; i++)
        if(q.data[i].op == 0)
            for(j = i + 1; j &lt; q.rear + 1; j++)
                if(q.data[j].op == 6)
                    return false;
    return true; 
}

//check whether there exists a distance between two candidates is greater than D
bool NoDistanceExceed(int sm[N][N])
{
    int i, j; 
    bool flag = false;
    for(i = 0; i &lt; N; i++)
        for(j = 0; j &lt; N; j++)
            if(sm[i][j] &gt; D)
                return false;
    return true; 
}

//check whether no corrAns is followed by mark in an OpQueue
bool NoCorrAnsMark(OpQueue q)
{
    int i, j; 
    for(i = q.front; i &lt; q.rear; i++)
        if(q.data[i].op == 7)
            for(j = i + 1; j &lt; q.rear + 1; j++)
                if(q.data[j].op == 6)
                    return false;
    return true; 
}

//check whether no mark(0, 1, ... , Q-1) is followed by notify in an OpQueue
bool NoNotifyMark(OpQueue q)
{
    int i, j, k; 
    int c; 
    for(k = 0; k &lt; N; k++)
        for(i = q.front; i &lt; q.rear; i++)
            if(q.data[i].op == 8 &amp;&amp; q.data[i].id == k)
            {
                c = q.data[i].id; 
                for(j = i + 1; j &lt; q.rear + 1; j++)
                    if(q.data[i].op == 7 &amp;&amp; q.data[i].id == c)
                        return false;
            }
    return true; 
}

//check whether all the answers are marked (i.e., score is not -1) for every candidate
bool AllMarked()
{
    int i, j;  
    for(i = 0; i &lt; N; i++)
        for(j = 0; j &lt; Q; j++)
            if(cand[i].item[j].s == -1)
                return false;
    return true; 
}

//check the integrity of the marking process
bool MarkIntegrity(OpQueue q) 
{
    int i; 
    if(FindOperation(q, 9, -1, -1, -1))
        if(NoNotifyMark(q) &amp;&amp; AllMarked())
            return true;
        else
            return false;
    else
        return true;       
}</declaration>
	<template>
		<name x="5" y="5">Candidate</name>
		<parameter>const ID i, array ans</parameter>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="-620" y="-246">
			<name x="-646" y="-280">Start</name>
		</location>
		<location id="id1" x="-493" y="-246">
			<name x="-527" y="-229">Register</name>
		</location>
		<location id="id2" x="-263" y="-110">
			<name x="-246" y="-118">Submit</name>
		</location>
		<location id="id3" x="-374" y="-246">
			<name x="-399" y="-229">Login</name>
		</location>
		<location id="id4" x="-263" y="25">
			<name x="-280" y="42">Accept</name>
		</location>
		<location id="id5" x="-620" y="25">
			<name x="-646" y="42">Notify</name>
		</location>
		<location id="id6" x="-263" y="-246">
			<name x="-272" y="-280">Get</name>
		</location>
		<location id="id7" x="-620" y="-110">
			<name x="-663" y="-119">End</name>
		</location>
		<init ref="id0"/>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-459" y="-42">t &gt; MaxT</label>
			<label kind="assignment" x="-459" y="-25">cend[i] = true, 
cexpire[i] = true</label>
		</transition>
		<transition id="id9">
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-561" y="-170">t &gt; MaxT</label>
			<label kind="assignment" x="-561" y="-153">cend[i] = true, 
cexpire[i] = true</label>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-680" y="-178">reset?</label>
		</transition>
		<transition id="id11">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-714" y="-51">notify[i]?</label>
		</transition>
		<transition id="id12">
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-170" y="-144">q_cnt[i] &lt; Q</label>
			<label kind="synchronisation" x="-170" y="-119">get[i]?</label>
			<nail x="-178" y="-110"/>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-348" y="-178">submit[i]!</label>
			<label kind="assignment" x="-391" y="-153">SetA(i, ans[i][q_cnt[i]])</label>
		</transition>
		<transition id="id14">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-357" y="-272">get[i]?</label>
		</transition>
		<transition id="id15">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-501" y="34">q_cnt[i]&gt;=Q</label>
			<label kind="assignment" x="-501" y="59">cend[i] = true</label>
		</transition>
		<transition id="id16">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-348" y="-51">accept[i]?</label>
		</transition>
		<transition id="id17">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-467" y="-272">login[i]!</label>
		</transition>
		<transition id="id18">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-603" y="-272">register[i]!</label>
		</transition>
	</template>
	<template>
		<name>Administrator</name>
		<location id="id19" x="-59" y="-59">
			<name x="-76" y="-42">Start</name>
			<label kind="invariant" x="-102" y="-102">pt &lt;= ExpT</label>
		</location>
		<location id="id20" x="144" y="8">
			<name x="119" y="25">Control</name>
		</location>
		<location id="id21" x="-399" y="8">
			<name x="-416" y="25">Init</name>
		</location>
		<location id="id22" x="-144" y="85">
			<name x="-153" y="102">End</name>
		</location>
		<location id="id23" x="-221" y="-59">
			<name x="-238" y="-42">Ready</name>
			<label kind="invariant" x="-255" y="-102">pt &lt;= ExpT</label>
		</location>
		<init ref="id21"/>
		<transition id="id24">
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="assignment" x="-442" y="-76">InitQueue(T, R, S, A), 
InitVar(), 
InitCand(cand)</label>
		</transition>
		<transition id="id25">
			<source ref="id20"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="25" y="68">end?</label>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-297" y="59">reset!</label>
		</transition>
		<transition id="id27">
			<source ref="id23"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-170" y="-76">corrAns?</label>
		</transition>
		<transition id="id28">
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="select" x="263" y="-34">i : ID</label>
			<label kind="guard" x="263" y="-17">!FindElement(R, i)</label>
			<label kind="synchronisation" x="263" y="0">register[i]?</label>
			<label kind="assignment" x="263" y="17">EnOpQueue(R, i, 1, -1, -1), 
EnOpQueue(T, i, 1, -1, -1)</label>
			<nail x="246" y="-26"/>
			<nail x="246" y="50"/>
		</transition>
		<transition id="id29">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="assignment" x="0" y="-59">EnOpQueue(T, -1, 0, -1, -1)</label>
		</transition>
	</template>
	<template>
		<name>Invigilator</name>
		<declaration>int isa = 0;      //identifier that has submitted but wait for accepting in Invigilator</declaration>
		<location id="id30" x="-348" y="0">
			<name x="-365" y="17">Start</name>
			<label kind="invariant" x="-382" y="34">pt &lt;= ExpT</label>
		</location>
		<location id="id31" x="-127" y="0">
			<name x="-144" y="17">Login</name>
			<label kind="invariant" x="-170" y="34">pt &lt;= ExpT</label>
		</location>
		<location id="id32" x="289" y="0">
			<name x="204" y="8">Process</name>
			<label kind="invariant" x="187" y="25">pt &lt;= ExpT and
t &lt;= MaxT</label>
		</location>
		<location id="id33" x="289" y="170">
			<name x="263" y="187">Submit</name>
			<label kind="invariant" x="255" y="204">pt &lt;= ExpT and
t &lt;= MaxT</label>
		</location>
		<location id="id34" x="595" y="0">
			<name x="587" y="17">End</name>
			<label kind="invariant" x="586" y="42">pt &lt;= ExpT</label>
		</location>
		<init ref="id30"/>
		<transition id="id35">
			<source ref="id32"/>
			<target ref="id34"/>
			<label kind="guard" x="408" y="-8">CandEnd()</label>
			<label kind="synchronisation" x="408" y="8">mark!</label>
			<nail x="433" y="34"/>
		</transition>
		<transition id="id36">
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="guard" x="263" y="76">t &gt; MaxT</label>
		</transition>
		<transition id="id37">
			<source ref="id34"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="59" y="238">reset?</label>
			<nail x="476" y="229"/>
			<nail x="-195" y="229"/>
		</transition>
		<transition id="id38">
			<source ref="id31"/>
			<target ref="id31"/>
			<label kind="select" x="-153" y="-153">i : ID</label>
			<label kind="synchronisation" x="-153" y="-136">login[i]?</label>
			<label kind="assignment" x="-153" y="-119">p_cnt++</label>
			<nail x="-161" y="-93"/>
			<nail x="-93" y="-93"/>
		</transition>
		<transition id="id39">
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="select" x="-280" y="-59">i : ID</label>
			<label kind="synchronisation" x="-280" y="-42">login[i]?</label>
			<label kind="assignment" x="-280" y="-25">p_cnt++</label>
		</transition>
		<transition id="id40">
			<source ref="id32"/>
			<target ref="id34"/>
			<label kind="guard" x="407" y="-76">t &gt; MaxT</label>
			<label kind="synchronisation" x="408" y="-59">mark!</label>
			<nail x="433" y="-34"/>
		</transition>
		<transition id="id41">
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="357" y="76">accept[isa]!</label>
			<label kind="assignment" x="348" y="93">EnOpQueue(A, isa, 5, GetQ(isa), GetA(isa)), 
EnOpQueue(T, isa, 5, GetQ(isa), GetA(isa)), 
q_cnt[isa]++</label>
			<nail x="340" y="85"/>
		</transition>
		<transition id="id42">
			<source ref="id32"/>
			<target ref="id32"/>
			<label kind="select" x="255" y="-195">i : ID</label>
			<label kind="guard" x="255" y="-178">q_cnt[i] &lt; Q</label>
			<label kind="synchronisation" x="255" y="-161">get[i]!</label>
			<label kind="assignment" x="255" y="-144">SetQ(i, q_cnt[i]), 
EnOpQueue(T, i, 3, GetQ(i), GetA(i))</label>
			<nail x="255" y="-93"/>
			<nail x="323" y="-93"/>
		</transition>
		<transition id="id43">
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="select" x="-68" y="34">i : ID</label>
			<label kind="guard" x="-68" y="51">FindElement(R, i)</label>
			<label kind="synchronisation" x="-68" y="68">submit[i]?</label>
			<label kind="assignment" x="-68" y="85">EnOpQueue(S, i, 4, GetQ(i), GetA(i)), 
EnOpQueue(T, i, 4, GetQ(i), GetA(i)), 
isa = i</label>
			<nail x="246" y="85"/>
		</transition>
		<transition id="id44">
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="select" x="-68" y="-93">i : ID</label>
			<label kind="guard" x="-68" y="-76">p_cnt == N</label>
			<label kind="synchronisation" x="-68" y="-59">get[i]!</label>
			<label kind="assignment" x="-68" y="-42">SetQ(i, q_cnt[i]), 
EnOpQueue(T, i, 3, GetQ(i), GetA(i)),
t = 0</label>
		</transition>
	</template>
	<template>
		<name>Examiner</name>
		<location id="id45" x="-671" y="-212">
			<name x="-731" y="-221">Start</name>
		</location>
		<location id="id46" x="-374" y="-212">
			<name x="-357" y="-221">Mark</name>
		</location>
		<location id="id47" x="-374" y="0">
			<name x="-399" y="17">Notify</name>
			<label kind="invariant" x="-399" y="34">pt &lt;= ExpT</label>
		</location>
		<location id="id48" x="-671" y="0">
			<name x="-679" y="17">End</name>
		</location>
		<init ref="id45"/>
		<transition id="id49">
			<source ref="id48"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-731" y="-119">reset?</label>
		</transition>
		<transition id="id50">
			<source ref="id47"/>
			<target ref="id47"/>
			<label kind="guard" x="-306" y="-25">imn &lt; N</label>
			<label kind="synchronisation" x="-306" y="-42">notify[imn]!</label>
			<label kind="assignment" x="-306" y="-8">EnOpQueue(T, imn, 8, -1, -1), 
imn++</label>
			<nail x="-314" y="25"/>
			<nail x="-314" y="-25"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-586" y="-42">imn &gt;= N</label>
			<label kind="synchronisation" x="-586" y="-25">end!</label>
			<label kind="assignment" x="-637" y="0">EnOpQueue(T, -1, 9, -1, -1)</label>
		</transition>
		<transition id="id52">
			<source ref="id46"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-365" y="-170">mark?</label>
			<label kind="assignment" x="-365" y="-153">MarkScore(cand, ca), 
ComputeSMatrix(cand), 
imn = 0, 
EnOpQueue(T, -1, 7, -1, -1)</label>
		</transition>
		<transition id="id53">
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-646" y="-272">corrAns!</label>
			<label kind="assignment" x="-646" y="-255">CorrAns(ca), 
EnOpQueue(T, -1, 6, -1, -1)</label>
		</transition>
	</template>
	<system>//Template instantiations
const array answer = {{0, 1, 2},   //candidates' answers
                      {2, 1, 0}};
C0 = Candidate(0, answer);
C1 = Candidate(1, answer);
AD = Administrator();
I = Invigilator();
E = Examiner();

//System Declaration
system C0, C1, AD, I, E;

</system>
	<queries>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-08-06 11:23:45 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:ID) not (not FindElement(R, i) and FindElement(S, i))</formula>
			<comment>Candidate Registration</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 11:23:25 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:ID) not (not FindElement(R, i) and FindElement(A, i))</formula>
			<comment>Candidate Eligibility</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 11:23:37 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i:ID) not (not FindElement(S, i) and FindElement(A, i))</formula>
			<comment>Answer authentication</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:23:27 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i:ID) OneAnswerEachQuestion(A, i)</formula>
			<comment>Answer Singularity</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:23:39 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i:ID) FirstSubmitFollowAccept(T, i)</formula>
			<comment>Acceptance Assurance</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:23:53 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] forall(i:ID) GetAcceptGet(T, i)</formula>
			<comment>Questions Ordering</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:24:03 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] StartAcceptEnd(T)</formula>
			<comment>Exam Availability</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:24:15 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] NoStartCorrAns(T)</formula>
			<comment>Answer-Score Integrity</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:24:25 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] NoDistanceExceed(sm)</formula>
			<comment>Cheater Detection</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:24:34 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] NoCorrAnsMark(T)</formula>
			<comment>Marking Correctness</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 02:24:43 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] MarkIntegrity(T)</formula>
			<comment>Mark Integrity</comment>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A&lt;&gt; C0.Start</formula>
			<comment>Candidate C0: For all paths, the "Start" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 11:40:37 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; C0.Register</formula>
			<comment>Candidate C0: For all paths, the "Register" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:38 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; C0.Login</formula>
			<comment>Candidate C0: For all paths, the "Login" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:39 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; C0.Get</formula>
			<comment>Candidate C0: For all paths, the "Get" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:40 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; C0.Submit</formula>
			<comment>Candidate C0: There exists a path where the "Submit" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:44 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; C0.Accept</formula>
			<comment>Candidate C0: There exists a path where the "Accept" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:47 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; C0.Notify</formula>
			<comment>Candidate C0: For all paths, the "Notify" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:49 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; C0.End</formula>
			<comment>Candidate C0: For all paths, the "End" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:52 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A&lt;&gt; I.Start</formula>
			<comment>Invigilator, I: For all paths, the "Start" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:56 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; I.Login</formula>
			<comment>Invigilator, I: For all paths, the "Login" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:58 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; I.Process</formula>
			<comment>Invigilator, I: For all paths, the "Process" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:52:59 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; I.Submit</formula>
			<comment>Invigilator, I: There exists a path where the "Submit" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:02 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; I.End</formula>
			<comment>Invigilator, I: For all paths, the "End" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:06 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A&lt;&gt; E.Start</formula>
			<comment>Examiner, E: For all paths, the "Start" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:09 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; E.Mark</formula>
			<comment>Examiner, E: For all paths, the "Mark" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:11 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; E.Notify</formula>
			<comment>Examiner, E: For all paths, the "Notify" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:13 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; E.End</formula>
			<comment>Examiner, E: For all paths, the "End" location is reachable.</comment>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:15 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] C0.Login imply pt&lt;=ExpT</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:27 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] E.End imply pt &lt;= ExpT</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:30 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] C0.Get imply t&lt;=MaxT</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:35 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] C0.Submit imply t&lt;=MaxT</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:37 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] C0.Accept imply t&lt;=MaxT</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:41 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] E.Notify imply t&gt;MaxT || CandEnd()</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:46 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] C1.End imply t&gt;MaxT || CandEnd()</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-08-06 00:53:48 +0800">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
	</queries>
</nta>
